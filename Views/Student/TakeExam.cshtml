@{
    Layout = "~/Views/Shared/_Custom_layout.cshtml";
}
@* Views/Student/TakeExam.cshtml *@
@model McqTask.Models.Question
@{
   
    var storedAnswers = ViewBag.SelectedAnswers as Dictionary<int, List<int>> ?? new Dictionary<int, List<int>>();
    var storedMatchingAnswers = ViewBag.SelectedMatchingAnswers as Dictionary<int, Dictionary<int, int>> ?? new Dictionary<int, Dictionary<int, int>>();


    var reorderedItems_left = new List<MatchingPair>();
    var reorderedItems_right = new List<MatchingPair>();


}
<div class="container mt-5">
    <div class="alert alert-warning text-center">
        <strong>Time Left: <span id="exam-timer"></span></strong>
    </div>
    <div class="progress mb-4">
        <div class="progress-bar" role="progressbar"
        style="width: @(((ViewBag.CurrentQuestion) * 100) / ViewBag.TotalQuestions)%">
            Question @ViewBag.CurrentQuestion of @ViewBag.TotalQuestions
        </div>
        
    </div>
    
    <div class="card">
        <div class="card-body container-fluid">
            <form asp-action="NavigateQuestion" method="post" id="exam-form">
                <div class="row">
                  
                    <div class="col-2 bg-light border-end" id="question-navigation" style="max-height: 400px; overflow-y: auto;">
                   
                    @for (int i = 1; i <= ViewBag.TotalQuestions; i++)
                    {
                            var isFlagged = ViewBag.FlaggedQuestions != null && ViewBag.FlaggedQuestions.Contains(i);
                            // Check if the button is the active question
                            var buttonClass = ViewBag.CurrentQuestion == i ? "btn btn-primary active" : "btn btn-outline-primary";
                         
                        <button type="submit" name="question_no" value="@i"
                                    class="@buttonClass  @(isFlagged ? "btn-warning" : "btn-outline-primary")">
                            @i
                        </button>
                            
                        
                    }`
                 
                </div>
                
                
                <div class="col-10" id="question-content">
                       
                        <input type="hidden" name="studentId" value="@ViewBag.StudentId" />
                        <input type="hidden" id="flaggedQuestionsInput" name="flaggedQuestions" value="@string.Join(",", ViewBag.FlaggedQuestions ?? new List<int>())" />
                        <!-- Flag Button for the Current Question -->
                        <button id="flag-button" class="btn btn-light position-absolute"
                                style="top: 10px; right: 10px;" onclick="toggleFlag()" type="button">
                            <img src="@(ViewBag.FlaggedQuestions != null && ViewBag.FlaggedQuestions.Contains(ViewBag.CurrentQuestion)
                    ? "/images/flag.png"
                    : "/images/unflag.png")"
                                 alt="Flag Button"
                                 id="flag-icon"
                                 class="flag-button"
                                 data-question-id="@ViewBag.CurrentQuestion"
                                 style="cursor: pointer; width: 32px; height: 32px;">
                        </button>

                    <h4 class="card-title mb-4">@Model.Text</h4>
                        @if (Model.Type == QuestionType.MultipleResponse)
                {
                    @foreach (var option in Model.Options)
                    {
                        //var isChecked =  storedAnswers.Contains(option.Id);
                        var isChecked = storedAnswers.ContainsKey(Model.Id) && ((List<int>)storedAnswers[Model.Id]).Contains(option.Id);
                        <div class="form-check mb-3">
                            <input type="checkbox" class="form-check-input"
                            name="answers[@Model.Id][]" value="@option.Id" @(isChecked ? "checked" : "") />
                            <label class="form-check-label">@option.Text</label>
                        </div>
                    }
                }
                        else if (Model.Type == QuestionType.MultipleChoice)
                {
                    @foreach (var option in Model.Options)
                    {
                        var isChecked = storedAnswers.ContainsKey(Model.Id) && ((List<int>)storedAnswers[Model.Id]).Contains(option.Id);
                        <div class="form-check mb-3">
                            <input type="radio" class="form-check-input"
                            name="answers[@Model.Id]" value="@option.Id" @(isChecked ? "checked" : "") />
                            <label class="form-check-label">@option.Text</label>
                        </div>
                    }
                }
                else
                {
                    var issaved = storedMatchingAnswers.ContainsKey(Model.Id) && storedMatchingAnswers[Model.Id].Count != 0;
                    if (issaved)
                    {
                        var leftOrder = storedMatchingAnswers[Model.Id].Keys.ToList();
                        var rightOrder = storedMatchingAnswers[Model.Id].Values.ToList();
                        reorderedItems_left = leftOrder
                       .Select(id => Model.MatchingPairs.First(pair => pair.Id == id))
                       .ToList();
                        reorderedItems_right = rightOrder
                       .Select(id => Model.MatchingPairs.First(pair => pair.Id == id))
                       .ToList();
                    }
                    else
                    {
                        reorderedItems_left = Model.MatchingPairs.OrderBy(item => item.LeftSideText).ToList();
                        reorderedItems_right = Model.MatchingPairs.OrderBy(item => item.RightSideText).ToList();
                    }
                    <div class="matching-container">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Left Side (Drag to reorder)</th>
                                    <th>Right Side (Drag to reorder)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="left-side">
                                        <ul id="left-side-list" class="connectedSortable">

                                            @foreach (var pair in reorderedItems_left)
                                            {
                                                <li class="draggable-item" data-id="@pair.Id" id="left-@pair.Id">
                                                    @pair.LeftSideText
                                                </li>
                                            }
                                        </ul>
                                    </td>
                                    <td class="right-side">
                                        <ul id="right-side-list" class="connectedSortable">
                                            @foreach (var pair in reorderedItems_right)
                                            {
                                                <li class="draggable-item" data-id="@pair.Id" id="right-@pair.Id">
                                                    @pair.RightSideText
                                                </li>
                                            }
                                        </ul>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                
                           
                   
                }
                    </div>
               </div>
                <div class="d-flex justify-content-between mt-4">
                    @if (ViewBag.CurrentQuestion > 1)
                    {
                        <button type="submit" name="direction" value="-1"
                                class="btn btn-secondary">
                            Previous
                        </button>
                    }
                    else
                    {
                        <div></div>
                    }

                    <button type="submit" name="direction" value="1"
                            class="btn btn-primary">
                        @(ViewBag.CurrentQuestion == ViewBag.TotalQuestions ? "Submit" : "Next")
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" defer></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
           var examEndTime = new Date("@ViewBag.ExamEndTime").getTime();
            var timerDisplay = document.getElementById("exam-timer");
             var examForm = document.getElementById("exam-form");

            function updateTimer() {
                var now = new Date().getTime();
                var timeLeft = examEndTime - now;

                if (timeLeft <= 0) {
                clearInterval(timerInterval);
                alert("Time is up! Submitting your exam...");

                // Add hidden input to mark it as a forced submission
                let timeUpInput = document.createElement("input");
                timeUpInput.type = "hidden";
                timeUpInput.name = "timeUp";
                timeUpInput.value = "true";
                examForm.appendChild(timeUpInput);

                examForm.submit(); // ✅ Force submit
                return;
            }

                var minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

                timerDisplay.innerHTML = minutes + "m " + seconds + "s";
            }

            updateTimer();
            var timerInterval = setInterval(updateTimer, 1000);
        });
    </script>
    <script>
        $(document).ready(function () {
            // Enable reordering of left side (without cross-dragging)
            $("#left-side-list").sortable({
                connectWith: ".connectedSortable",
                placeholder: "sortable-placeholder",
                update: function (event, ui) {
                    updateMatchingPairs();
                }
            });

            // Enable reordering of right side (without cross-dragging)
            $("#right-side-list").sortable({
                connectWith: ".connectedSortable",
                placeholder: "sortable-placeholder",
                update: function (event, ui) {
                    updateMatchingPairs();
                }
            });

            // Prevent items from being dragged between the lists
            $("#left-side-list").sortable("option", "connectWith", "#left-side-list");
            $("#right-side-list").sortable("option", "connectWith", "#right-side-list");

            // Function to update the matching pairs after reordering
            function updateMatchingPairs() {
                var leftOrder = $("#left-side-list").sortable("toArray");
                var rightOrder = $("#right-side-list").sortable("toArray");

                // Clear any previous hidden fields (if they exist)
               
                $("input[type='hidden']").not("input[name='studentId']").remove();

                // Create hidden input fields to store the updated order
                $.each(leftOrder, function (index, item) {
                    var itemId = item.replace("left-", "");
                    var hiddenInput = $("<input>")
                        .attr("type", "hidden")
                        .attr("name", "matchingAnswers[@Model.Id][" + itemId + "]")
                        .val(rightOrder[index].replace("right-", ""));
                    $("form").append(hiddenInput);
                });
            }
        });
    </script>
    <script>
        function toggleFlag() {
            const flagIcon = document.getElementById("flag-icon");
            const questionId = flagIcon.getAttribute("data-question-id");
            const flaggedInput = document.getElementById("flaggedQuestionsInput");

            let flaggedQuestions = flaggedInput.value ? flaggedInput.value.split(',').map(Number) : [];
            if (flaggedQuestions.includes(parseInt(questionId))) {
                flaggedQuestions = flaggedQuestions.filter(id => id !== parseInt(questionId)); // Remove from flagged list
                flagIcon.src = "/images/unflag.png"; // Update UI to unflagged
          } else {
                flaggedQuestions.push(parseInt(questionId)); // Add to flagged list
                flagIcon.src = "/images/flag.png"; // Update UI to flagged
                 }

        flaggedInput.value = flaggedQuestions.join(','); // Update hidden input

        }
</script>
    <script>
        function autoSaveProgress() {
            $.ajax({
                url: "/Student/SaveProgress",
                method: "POST",
                data: {},
                success: function (response) {
                    console.log("Progress saved successfully.");
                },
                error: function (err) {
                    console.log("Error saving progress.");
                }
            });
        }

        setInterval(autoSaveProgress, 60000); // Auto-save every 5 minutes
    </script>
    <script>
        window.addEventListener("beforeunload", function (event) {
            navigator.sendBeacon("/Student/SaveProgress");
        });
    </script>
    <style>
        /* Styling for draggable items */
        .draggable-item {
            padding: 10px;
            margin: 5px;
            border: 1px solid #ccc;
            cursor: move;
        }

        /* Change color of items when at rest */
#left-side-list li, #right-side-list li {
    background-color: #007bff; /* Blue when at rest */
    color: white; /* Optional: Adjust text color to contrast with the blue background */
}

/* Change color of items when being dragged */
#left-side-list li.ui-sortable-helper, #right-side-list li.ui-sortable-helper {
    background-color: #0056b3; /* Darker blue when being dragged */
}

        /* Placeholder for when dragging */
        .sortable-placeholder {
            background-color: #e9e9e9;
            border: 1px dashed #ccc;
            height: 40px;
        }

        /* Connected sortable list (for both left and right sides) */
        #left-side-list, #right-side-list {
            list-style: none;
            padding-left: 0;
        }
        
    </style>
    <style>
        .flag-button {
            transition: background-color 0.3s, color 0.3s;
        }
    </style>

}